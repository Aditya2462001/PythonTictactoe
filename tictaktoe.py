# -*- coding: utf-8 -*-
"""TicTakToe.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E4oYVKEYp2tBIUGn900eN3Lk6CwahxgB

This is a small project to get better at python. Try'ng to make a CLI Tic-Tac-Toe.
"""

#Global variables 
board =["-","-","-",
        "-","-","-",
        "-","-","-",]
        
is_game_on = True
winner = None
current_player = "X"

"""Game functions"""

# function to display game board
def display_board():
  print("\n")
  print(board[0] + " | " + board[1] + " | " + board[2] + "     1 | 2 | 3")
  print(board[3] + " | " + board[4] + " | " + board[5] + "     4 | 5 | 6")
  print(board[6] + " | " + board[7] + " | " + board[8] + "     7 | 8 | 9")
  print("\n")

#display_board()

#Funtion to gat the position from player and to validate the position 
def handle_turn(player):
  print(player + "'s turn.")
  position = input("Choose a position from 1-9:\n")

  valid = False
  while not valid:
    while position not in ["1", "2", "3", "4", "5", "6", "7", "8", "9"]:
      position = input("Choose a position from 1-9: \n")
    
    position = int(position) - 1

    if board[position] == "-":
      valid = True
    else:
      print("You can't go there. Go again.")

  # Put the game piece on the board
  board[position] = player

  # Show the game board
  display_board()

#check the game status 
def is_game_over():
  check_win()
  check_tie()
  return
#to check if someone won 
def check_win():
    # Set global variables
  global winner
    # Check if there was a winner anywhere
  row_winner = check_rows()
  column_winner = check_col()
  diagonal_winner = check_dia()
    # Get the winner
  if row_winner:
    winner = row_winner
  elif column_winner:
    winner = column_winner
  elif diagonal_winner:
    winner = diagonal_winner
  else:
    winner = None

#check if the game is a tie
def check_tie():
  global is_game_on 
  # If board is full
  if "-" not in board:
    is_game_on  = False
    return True
  # Else there is no tie
  else:
    return False

#to check the rows ,columns and diagonals 
def check_rows():
  global is_game_on
  
  row1=board[0]==board[1]==board[2] != "-"
  row2=board[3]==board[4]==board[5] != "-"
  row3=board[6]==board[7]==board[8] != "-"

  if row1 or row2 or row3 :
    is_game_on = False
  
  if row1:
    return board[0] 
  elif row2:
    return board[3] 
  elif row3:
    return board[6] 
  else :
    return None  
  
  return
def check_col():
  global is_game_on
  
  col1=board[0]==board[3]==board[6] != "-"
  col2=board[1]==board[4]==board[7] != "-"
  col3=board[2]==board[5]==board[8] != "-"

  if col1 or col2 or col3 :
    is_game_on = False
  
  if col1:
    return board[0] 
  elif col2:
    return board[1] 
  elif col3:
    return board[2] 
  else :
    return None
  return

def check_dia():
  dia1 = board[0]==board[4]==board[8] != "-"
  dia2 = board[2]==board[4]==board[6] != "-"
  
  if dia1 or dia2 :
    is_game_on = False
  
  if dia1:
    return board[0] 
  elif dia2:
    return board[2] 
  else :
    return None
  return
  

#To exchange turns
def flip_player():
  global current_player
  
  if current_player=="X":
    current_player="O"
  elif current_player=="O":
    current_player="X"
  return

#the game logic 
def play_game():
  global winner

  display_board()
  while is_game_on:
    handle_turn(current_player)
    is_game_over()
    flip_player()

  if winner =="X" or winner=="O":
    print(winner+" won")
  elif winner == None:
    print("Tie")

"""Game execution"""

play_game()

